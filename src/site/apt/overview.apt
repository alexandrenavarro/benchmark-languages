Overview

* Introduction
  
  We heard a lot about the performance of programming languages notably on new pseudo-compiled languages like Java or C#.

  It is difficult to have a real idea between real arguments, feedback and others. 
We propose in this article to do some tests in order to have the most objective opinion.

* Goals
  
  The main goal is to measure the intrinsic performance of C# versus Java.
We propose different tests on some features who we consider representative of a source code of C# or Java.
A benchmark in C/C++ was added to make some comparison with the 2 pseudo-compiled languages.
No source code in C/C++ will be on document but source code are available.
The code of C/C++ is optimised but not ultra optimised as an expert do for extreme performance (it is also the case for C# or Java).
A benchmark in Scala will be added when I will have time to do.

  Warning, the idea is not to write a code ultra optimised to have a result but to use standards offered by the language.
The unsafe code or C/C++ wrapped is out of scope for C# or Java. 
If the language offers several solutions to achieve the same result, we choose the more performant.

  This article does not cover :
  * UI components
  * Wrapping of C++
  * Tools
  
* Test Environment

{{{./environment.html} Details of the compilation/run environment}}

* Test Procedure

{{{./procedure.html} Details of the test procedure}}


* List of Tests 
  * [[/GetterSetterTest|Getter et setter sur les objets]]
  * [[/InvokationTest|Appel de methode]]
  * [[/CollectionTest|Les containers (Array, List, Map, ...)]]
  * [[/CreationTest|Création d'objets (Pas de Pool d'objets, Pas d'Objet sur la stack)]]
  * [[/ArithmeticTest|Calculs arithmétiques (+, -, /, *) ]]
  * [[/ThreadingTest|Le Multithreading]]
  * [[/AutoboxingTest|L'autoboxing (overhead)]]
  * [[/FileTest|File manipulation (Read, Write)]]
  * [[/TimingTest|La gestion du temps]]
  * [[/RecursiveTest|La récursivité]]
  * [[/StringConcatTest|La gestion des Strings]]
  * [[/NestedLoopsTest|Nested Loops]]
  * [[/MatrixMultiplyTest|Calcul de matrice]]
  * [[/ExceptionTest|La gestion des exceptions]]
  * [[/HeapSortTest|Tri de tableau]]
  * [[/ReflectionTest|Reflection]]
  * [[/EnumTest|Enum]]
  * [[/TrigoTest|Calculs trigonométriques (sin, cos, tan, exp, log, sqrt)]]

  The tests are more and less in the order of the importance for the performance.
  
  Warning, the comments were made on the result of the first environment 1.
The results of environment 2 are a little different.


* Summary of the results

  On the graphics, the less, the better.
  
  The best time is setted to 1 in order to show the ratio between the best and the others.
   
** Environment 1

[[Image:summary-benchmark.png]]

| class="wikitable sortable" style="text-align:center"
! Test Name !! Java (windows x86) !! C# (windows x86)!! C/C++ (VS windows
x86)
|-
| align=left | [[/GetterSetterTest|Getter Setter]] ||1.01||2.97||1
|-
| align=left | [[/InvokeTest|Invoke]] ||1||3.6||2.53
|-
| align=left | [[/CollectionTest|Collection]] ||1||2.46||7.6
|-
| align=left | [[/CreationTest|Creation]] ||1||1.39||126.76
|-
| align=left | [[/ArithmeticTest|Arithmetic]] ||1||1.53||1.03
|-
| align=left | [[/ThreadingTest|Threading]] ||1||1.49||0
|-
| align=left | [[/AutoboxingTest|Autoboxing]] ||1||1.72||0
|-
| align=left | [[/FileTest|File]] ||1||1.03||1.08
|-
| align=left | [[/TimingTest|Timing]] ||1||11.51||1.12
|-
| align=left | [[/RecusiveTest|Recusive]] ||1||3.52||2.63
|-
| align=left | [[/StringConcatTest|StringConcat]] ||1||1.07||1.44
|-
| align=left | [[/NestedLoopsTest|Nested Loops]] ||1||3.47||2.47
|-
| align=left | [[/MatrixMultiplyTest|Matrix Multiply]] ||1.75||1.7||1
|-
| align=left | [[/HeapSortTest|HeapSort]] ||1||1.14||1.1
|-
| align=left | [[/ExceptionTest|Exception]] ||1||20.13||25.56
|-
| align=left | [[/ReflectionTest|Reflection]] ||1||40.23||0
|-
| align=left | [[/EnumTest|Enum]] ||1||38.95||0
|-
| align=left | [[/TrigoTest|Trigo]] ||10.61||1||1.29


** Environment 2

[[Image:summary-benchmark-1-env2.png]]

[[Image:summary-benchmark-2-env2.png]]

| class="wikitable sortable" style="text-align:center"
! Test Name !! Java (windows x86) !! Java (linux x86) !! Java (linux
x86_64) !! C# (windows x86) !! C/C++ (VS windows x86)!! C/C++ g++ (linux
x86_64))
|-
| align=left | [[/GetterSetterTest|Getter Setter]]
||1.02||1.02||1.08||1.89||1.22||1
|-
| align=left | [[/InvokeTest|Invoke]] ||1.01||1.06||1||2.38||2.16||1.27
|-
| align=left | [[/CollectionTest|Collection]]
||1||1.01||1.3||2.11||5.63||1.95
|-
| align=left | [[/CreationTest|Creation]]
||1||1.02||2.04||1.28||53.55||39.6
|-
| align=left | [[/ArithmeticTest|Arithmetic]]
||1.06||1.5||1||1.55||1.04||1.02
|-
| align=left | [[/ThreadingTest|Threading]] ||1.01||1.04||1||1.48||0||0
|-
| align=left | [[/AutoboxingTest|Autoboxing]] ||1.17||1.18||1.76||1||0||0
|-
| align=left | [[/FileTest|File]] ||4.06||2.5||1||3.61||3.97||1.92
|-
| align=left | [[/TimingTest|Timing]] ||1||10.77||5.98||15.14||1.17||7.86
|-
| align=left | [[/RecusiveTest|Recusive]] ||1.03||1.03||1||1.73||1.8||1.17
|-
| align=left | [[/StringConcatTest|StringConcat]]
||1.25||1.23||1.08||1||1.11||1.28
|-
| align=left | [[/NestedLoopsTest|Nested Loops]]
||2||2||1||5.89||4.37||7.63
|-
| align=left | [[/MatrixMultiplyTest|Matrix Multiply]]
||2.74||2.74||1.8||2.47||1.58||1
|-
| align=left | [[/HeapSortTest|HeapSort]] ||1.11||1.12||1.12||1.12||1.01||1
|-
| align=left | [[/ExceptionTest|Exception]]
||1||1.16||1.04||9.96||12.74||16.89

|-
| align=left | [[/ReflectionTest|Reflection]] ||1||1.31||1.13||21.03||0||0
|-
| align=left | [[/EnumTest|Enum]] ||1.12||1||1.13||42.02||0||0
|-
| align=left | [[/TrigoTest|Trigo]] ||7.5||6.23||6.75||1||1.37||1.4
|-
|

Some tests setted to 0 en C/C++ were not run because
  * No sense (Autoboxing)
  * A different sens (Enum)
  * Impossible to do in this language (Reflection)
  * Complex to do (different implementations for instance pthread, thread windows, boost) (Threading)

* Source and Results

  You can checkout the project or download it on ... [last update 2008-01-16]

** Directory Layout

*benchmark-languages
** benchmark-cpp : project C/C++ avec un fichier README.txt pour savoir
comment compiler et runner les tests
*** src/main/cpp : source C/C++
** benchmark-csharp : projet C# avec un fichier README.txt pour savoir
comment compiler et runner les tests
*** src/main/csharp: source C#
** benchmark-java : projet java avec un fichier README.txt pour savoir
comment compiler et runner les tests
*** src/main/java: source java
** results : résultats
*** env1 : résultats pour environnement 1
*** env2 : résultats pour environnement 2


* Auteur du benchmark

  Alexandre Navarro (alexandre.j.navarro at gmail.com)


* Conclusion

** Comparaision des languages pseudo-compilés Java-C#
  
  En dehors de la concaténation des chaines de caratère avec des + et les
opérations trigonométriques, le java est toujours au moins aussi rapide que
C# et dans de nombreux cas plus rapide voire beaucoup plus rapide.

  Le java se distingue particulièrement dans tout ce qui est Création,
getter, setter d'object, Invocation de méthode (surtout par interface),
gestion des Collections (Array, List, Map), Timing, Exception et
Reflection.

** Comparaison du meilleur language pseudo-compilé (Java) avec le C/C++

  Attention, les 2 languages ont certains concepts très différents ce qui
rend certains benchmarks très avantageux pour l'un des 2 langages.

  Voici 2 exemples :

  Le new en java/c# (allocation de la mémoire sur le Heap déjà préalloué) est
conceptuellement totalement différent du new en C++ (demande à l'OS
d'allocation de la mémoire physique) et est très avantageux pour le java/C#
en terme de performance (mais très désavantageux terme d'occupation
mémoire).

  La String en java/c# étant immutable comparé au C++ où la String est
mutable, la concaténation de String avec des + n'a pas du tout le même sens
en java/C# qu'en C++ et est très avantageux pour le C++.

  Le C/C++ est plus rapide dans le cas de manipulation très bas niveau de
registres (multiplication de matrices par exemple) et permet d'avoir une
optimisation à la compilation plus importante (beaucoup de tests modifiés
pour qu'ils aient du sens en C/C++) notamment pour dérouler des boucles
(Nested Loops avant modification pour le tromper l'optimiseur gcc) par
exemple. Même si ce n'est pas l'objet du test, C/C++ prend moins de mémoire
que du Java/C#. Ces différentes raisons peuvent expliquer pourquoi il est
intéressant de faire de C (pas du C++) pour faire certains choses comme un
kernel d'OS (linux par exemple).

  Le java permet de faire des optimisations à la compilation (un peu moins
globalement que le C/C++) mais aussi à l'éxecution ce qui n'est pas
possible en C/C++ (voir [http://en.wikipedia.org/wiki/Escape_analysis
l'article sur l'Escape Analysis de java]). Les tests Getter Setter ont été
modifiés pour qu'ils ne soient pas optimisés. Le java est très bon pour
tout ce qui création d'objet sur le Heap (pouvant être + ou - contourné en
C/C++ par de l'allocation sur la stack ou des pools d'objet)  et
l'invocation de méthode (notamment par interface / méthodes virtuelles en
C/C++ et non statiques). On voit que les tests où le java est meilleur sont
des tests où l'on fait de la programmation objet.

  Le benchmark compare du Java, C# et du C++ pas beaucoup de C. Le C et le
C++ sont différents et non pas les mêmes performance (en désavantage au
C++).

  Globalement on peut se rendre compte que les résultats sont souvent proches
en dehors de cas particuliers comme la création des objets sur le Heap, la
manipultation de Collection (stdlib pas très optimisé notamment sous Visual
Studio et lié au temps mis pour mettre des objets sur le heap) et les
Exception (pas très important en C/C++).

** Précision importante
  
  Je précise fortement que '''CECI N'EST QU'UN BENCHMARK''' et il faut le
prendre comme tel. Il se veut le plus réaliste possible et le plus objectif
possible. Les rapports de performance ne seront pas les mêmes sur une vraie
application de production.

* Some questions ?

  I'm not expert in every language, if some source codes are not well optimized, contact me on alexandre.j.navarro at gmail.com. 
  If you are interested in developping the benchmark in your favourite new language (like scala, ruby, groovy, python), don't hesitate to contact me on alexandre.j.navarro at gmail.com
  
* Others talk about
  PS: Merci de n'indiquer que des comparatifs récents.
  * [http://artisan.karma-lab.net/java-mono-natif-performances-comparees Java1.6 vs C#Mono vs Gcc]
  * [http://www.irrlicht3d.org/pivot/entry.php?id=446 C++ vs Java6]
  * [http://shootout.alioth.debian.org/gp4/benchmark.php?test=all&lang=java&lang2=csharp comparatif multi language]
  * [http://www.bytonic.de/html/benchmarks.html Quand Java est plus rapide que le C dans une vraie application (Quake2)]
  * [http://java.sun.com/developer/technicalArticles/javase/consumerjre/#Performance Encore plus de perf sous windows avec la version 1.7 et un usage intensif de DirectX]
  * [http://www.tommti-systems.de/go.html?http://www.tommti-systems.de/main-Dateien/reviews/languages/benchmarks.html  Benchmark java, C/C++, java (attention les JVM et CLR sont très anciennes (jdk-1.4 C#-1.0)]
  * [http://www.kano.net/javabench/ Comparaison C/C++ et java]

* Others Links

  * [http://en.wikipedia.org/wiki/Java_performance Wikipedia Java Performance (Très bon article comme point d'entrèe)]
  * [http://en.wikipedia.org/wiki/Escape_analysis Article très intéressant sur l'Escape Analysis de java]
  * [http://en.wikipedia.org/wiki/C_Sharp#Performance C# performance]
  * [http://en.wikipedia.org/wiki/Comparison_of_C_Sharp_and_Java Comparaison Java / C# (features)]
  * [http://www.ondotnet.com/pub/a/dotnet/2003/06/23/mcinterop.html?page=1 Article sur le C++/CLI avec ses désavantages et ses avantages]
  * [http://msdn2.microsoft.com/en-us/library/aa712981(VS.71).aspx Article explicant que l'interop entre la CLR et C++ natif/DLL utilise exactement le même méchanisme pour PInvoke et pour ManagedC+]
  * [http://www.asp-php.net/tutorial/asp.net/linq-2.php?page=1 Article indiquant que depuis la .Net 2.0, les CLR n'évolue plus notamment en .Net 3.0 ou dans le futur .Net 3.5]
  * [http://java.sun.com/performance/reference/whitepapers/6_performance.html Sun Performance whitepaper (1.6)]
  * [http://msdn2.microsoft.com/en-us/library/ms998547.aspx C# Improving Managed Code Performance]

